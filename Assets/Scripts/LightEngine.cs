using System.Collections.Generic;
using UnityEngine;

public class LightEngine : MonoBehaviour
{
    public GameObject shadows;
    public bool showCursor;
    public Transform cursor;

    // angle by which to miss edges of objects while raycasting past them
    public float edgeMiss = 0.02f;
    // TODO
    // how many vertices make up the circle around the edge of light sources
    //public int circlePoints = 50;

    public static LightEngine Instance { get; private set; }

    // areas illuminated by particular light sources
    private Dictionary<LightSource, LightMesh> _sourceMeshes
        = new Dictionary<LightSource, LightMesh>();

    public LightMesh this[LightSource key]
    {
        get
        {
            if (!_sourceMeshes.ContainsKey(key))
                return null;

            return _sourceMeshes[key];
        }
    }

    public static void Register(LightSource source) => Instance.RegisterSource(source);
    public static void Unregister(LightSource source) => Instance.UnregisterSource(source);

    protected void RegisterSource(LightSource source)
    {
        // TODO: handle multiple light sources
        var lightMesh = shadows.GetComponent<LightMesh>();
        lightMesh.CreateMesh(source);
        _sourceMeshes[source] = lightMesh;
    }

    // TODO - maybe this should clear the geometry generated by the source?
    protected void UnregisterSource(LightSource source, bool clearGeometry = true)
    {
        if (!_sourceMeshes.ContainsKey(source))
            return;

        var lightMesh = _sourceMeshes[source];
        _sourceMeshes.Remove(source);

        Destroy(lightMesh.gameObject);
    }

    private void Awake()
    {
        if (Instance != null)
            throw new System.Exception();

        Instance = this;
    }

    private void Start()
    {
        if (showCursor)
        {
            cursor.transform.SetParent(transform);
        }
    }

    private void Update()
    {
        if (!showCursor)
            return;

        cursor.transform.position = (Vector2)Camera.main.ScreenToWorldPoint(Input.mousePosition);
    }
}

public class LightRayAngleComparer : IComparer<LightRay>
{
    public int Compare(LightRay x, LightRay y) => x.angle.CompareTo(y.angle);
}

