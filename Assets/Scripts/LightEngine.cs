using System.Collections.Generic;
using UnityEngine;

public class LightEngine : MonoBehaviour
{ 
    public GameObject shadows;

    // angle by which to miss edges of objects while raycasting past them
    public float edgeMiss = 0.02f;
    // TODO
    // how many vertices make up the circle around the edge of light sources
    //public int circlePoints = 50;

    public static LightEngine Instance { get; private set; }

    private IComparer<LightRay> _comparer;

    // areas illuminated by particular light sources
    private Dictionary<LightSource, LightMesh> _sourceMeshes
        = new Dictionary<LightSource, LightMesh>();
    private LightMesh[] _lightMeshes;

    public static void Register(LightSource source) => Instance.RegisterSource(source);
    public static void Unregister(LightSource source) => Instance.UnregisterSource(source);

    protected void RegisterSource(LightSource source)
    {
        // TODO: handle multiple light sources
        shadows.GetComponent<LightMesh>().CreateMesh(source);
    }

    // TODO - maybe this should clear the geometry generated by the source?
    protected void UnregisterSource(LightSource source, bool clearGeometry = true)
    {
        if (!_sourceMeshes.ContainsKey(source))
            return;

        var lightMesh = _sourceMeshes[source];
        _sourceMeshes.Remove(source);

        Destroy(lightMesh.gameObject);
    }

    private void Awake()
    {
        if (Instance != null)
            throw new System.Exception();

        Instance = this;
        _comparer = new LightRayAngleComparer();
    }

    private void Start()
    {
        _lightMeshes = GetComponentsInChildren<LightMesh>();
    }
}

public class LightRayAngleComparer : IComparer<LightRay>
{
    public int Compare(LightRay x, LightRay y) => x.angle.CompareTo(y.angle);
}

